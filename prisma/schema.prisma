// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String?
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?
  role          String    @default("user")
  isBanned      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  Content       Content[]
}

model Content {
  id                String                 @id @default(cuid())
  title             String
  subtitle          String?
  slug              String
  status            String
  content           String
  publishedAt       DateTime               @default(now())
  isPublished       Boolean                @default(false)
  category          String                 @default("manga")
  description       String?
  tags              String[]
  target            String                 @default("shonen")
  language          String                 @default("en")
  isColored         Boolean                @default(false)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  authorId          String                 @map("author_id")
  author            User                   @relation(fields: [authorId], references: [id])
  additionalArtists AdditionalArtistInfo[]
  chapters          Chapter[]
  // comments       Comment[]
  editor            String?
  counts            CountInfo?
}

model CountInfo {
  id        String   @id @default(cuid())
  contentId String   @unique @map("content_id")
  views     Int      @default(0)
  likes     Int      @default(0)
  comments  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model AdditionalArtistInfo {
  id         String   @id @default(cuid())
  contentId  String   @unique @map("content_id")
  artistName String
  role       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  content    Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model Chapter {
  id        String   @id @default(cuid())
  contentId String   @map("content_id")
  number    Float
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  pages     Page[]
}

model Page {
  id        String   @id @default(cuid())
  chapterId String   @map("chapter_id")
  number    Int
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}
